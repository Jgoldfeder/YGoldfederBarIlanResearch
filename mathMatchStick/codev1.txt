--a matchstick digit has 7 slots where matches can be
--we will use the following naming scheme:
--     t
--  l1   r1
--     m
--  l2   r2
--     b
--n is the number this digit represents. All numbers greater than 9 or less than 0 will be interpretted arbitrarily
MODULE digit(n)
VAR
t : boolean;
m : boolean;
b : boolean;
l1 : boolean;
l2 : boolean;
r1 : boolean;
r2 : boolean;

DEFINE
--useful to determine what number if any is currently being represented by these matches
zero := t & !m & b & l1 & l2 & r1 & r2;
one := !t & !m & !b & !l1 & !l2 & r1 & r2;
two := t & m & b & !l1 & l2 & r1 & !r2;
three := t & m & b & !l1 & !l2 & r1 & r2;
four := !t & m & !b & l1 & !l2 & r1 & r2;
five := t & m & b & l1 & !l2 & !r1 & r2;
six := t & m & b & l1 & l2 & !r1 & r2;
seven := t & !m & !b & !l1 & !l2 & r1 & r2;
eight := t & m & b & l1 & l2 & r1 & r2;
nine := t & m & b & l1 & !l2 & r1 & r2;

--number of matches in this digit model
total := (t ? 1 : 0) + (m ? 1 : 0) + (b ? 1 : 0) + (l1 ? 1 : 0) + (l2 ? 1 : 0) + (r1 ? 1 : 0) + (r2 ? 1 : 0);

--number of matches we began with
initial := case
n=0 : 6;
n=1 : 2;
n=2 : 5;
n=3 : 5;
n=4 : 4;
n=5 : 5;
n=6 : 6;
n=7 : 3;
n=8 : 7;
n=9 : 6;
TRUE : 1000; --really this means its undefined
esac;

--number of matches added or subtracted to the system,, to be used by the mainmodule to maintain a zero sum of the offsets of all digits
offset :=  total - initial;

--integral representaion of this digits value. if the number is not a digit, value is unspecified
value := case
zero : 0;
one : 1;
two : 2;
three : 3;
four : 4;
five : 5;
six : 6;
seven : 7;
eight : 8;
nine : 9;
TRUE : -1;
esac;

MODULE operator(is_plus)
VAR
--only supported operators are plus and minus. Thus, the operator must always have a horizontal match (minus), and may have a vertical one as well (plus)
vertical : boolean;
DEFINE
initial := is_plus ? 1 : 0;
total := vertical ? 1 : 0;
offset := total - initial;

MODULE main

DEFINE
--total offset must equal zero in solution set.
balanced := 0=(leftOperand.offset+rightOperand.offset+result.offset+op.offset);  
--if either operand is -1 that means it is not currently a number. We want to ensure all digits are parsable in any solution set.
parsable := (leftOperand.value != -1) & (result.value!= -1) & (rightOperand.value != -1);
--the equation must also be true in any solution set
equal := op.vertical ? ((leftOperand.value + rightOperand.value) = result.value) : ((leftOperand.value - rightOperand.value) = result.value);
goal := balanced & parsable & equal;
VAR
