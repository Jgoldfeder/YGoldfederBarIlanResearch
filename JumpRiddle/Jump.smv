MODULE main
VAR
--model consists of ten potention slots for matches, which can either contain a single match, as is the initial state, contain two matches, or no matches. 
--alots are 0-9, augmented 3 at either end to allow overflow
--true signifies this match is crossed, false signifies uncrossed. Two crossed matches are represented as two consecutive slots in the array marked true
matches : array -3..12 of boolean;
move : 0..9;
direction : {-1,1};
mNum : 0..6;
DEFINE
--goal is all matches are crossed
goal := (matches[0] & matches[1] & matches[2] & matches[3] & matches[4] & matches[5] & matches[6] & matches[7] & matches[8] & matches[9]) = TRUE;

ASSIGN
init(mNum) := 0;
init(matches[0]) :=  FALSE;
init(matches[1]) :=  FALSE;
init(matches[2]) :=  FALSE;
init(matches[3]) :=  FALSE;
init(matches[4]) :=  FALSE;
init(matches[5]) :=  FALSE;
init(matches[6]) :=  FALSE;
init(matches[7]) :=  FALSE;
init(matches[8]) :=  FALSE;
init(matches[9]) :=  FALSE;

next(mNum) := mNum=6? 6 : mNum + 1;

next(matches[0]) := case 
move = 0 : matches[0 + direction];
move = 0 - direction : matches[0 + direction];
move = 0 - direction*2 : TRUE;
move = 0 - direction*3 : TRUE;
TRUE : matches[0];
esac;
next(matches[1]) := case 
move = 1 : matches[1 + direction];
move = 1 - direction : matches[1 + direction];
move = 1 - direction*2 : TRUE;
move = 1 - direction*3 : TRUE;
TRUE : matches[1];
esac;
next(matches[2]) := case 
move = 2 : matches[2 + direction];
move = 2 - direction : matches[2 + direction];
move = 2 - direction*2 : TRUE;
move = 2 - direction*3 : TRUE;
TRUE : matches[2];
esac;
next(matches[3]) := case 
move = 3 : matches[3 + direction];
move = 3 - direction : matches[3 + direction];
move = 3 - direction*2 : TRUE;
move = 3 - direction*3 : TRUE;
TRUE : matches[3];
esac;next(matches[04]) := case 
move = 04 : matches[04 + direction];
move = 04 - direction : matches[04 + direction];
move = 04 - direction*2 : TRUE;
move = 04 - direction*3 : TRUE;
TRUE : matches[04];
esac;
next(matches[05]) := case 
move = 05 : matches[05 + direction];
move = 05 - direction : matches[05 + direction];
move = 05 - direction*2 : TRUE;
move = 05 - direction*3 : TRUE;
TRUE : matches[05];
esac;
next(matches[06]) := case 
move = 06 : matches[06 + direction];
move = 06 - direction : matches[06 + direction];
move = 06 - direction*2 : TRUE;
move = 06 - direction*3 : TRUE;
TRUE : matches[06];
esac;

next(matches[07]) := case 
move = 07 : matches[07 + direction];
move = 07 - direction : matches[07 + direction];
move = 07 - direction*2 : TRUE;
move = 07 - direction*3 : TRUE;
TRUE : matches[07];
esac;
next(matches[08]) := case 
move = 08 : matches[08 + direction];
move = 08 - direction : matches[08 + direction];
move = 08 - direction*2 : TRUE;
move = 08 - direction*3 : TRUE;
TRUE : matches[08];
esac;
next(matches[09]) := case 
move = 09 : matches[09 + direction];
move = 09 - direction : matches[09 + direction];
move = 09 - direction*2 : TRUE;
move = 09 - direction*3 : TRUE;
TRUE : matches[09];
esac;

LTLSPEC G !(goal &(mNum<=5));
