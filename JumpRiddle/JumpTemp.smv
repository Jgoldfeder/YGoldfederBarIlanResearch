MODULE main
VAR
--model consists of 8 potential slots for matches, which can either contain a single match, as is the initial state, contain two matches, or no matches.
--slots are 0-7, augmented 3 at either end to allow overflow
--true signifies this match is crossed, false signifies uncrossed. Two crossed matches are represented as two consecutive slots in the array marked true
matches : array -3..10 of boolean;
move : 0..7;
direction : {-1,1};
DEFINE
--goal is all matches are crossed
goal :=(TRUE & matches[0] & matches[1] & matches[2] & matches[3] & matches[4] & matches[5] & matches[6] & matches[7]);
ASSIGN
init(matches[0]) :=  FALSE;
init(matches[1]) :=  FALSE;
init(matches[2]) :=  FALSE;
init(matches[3]) :=  FALSE;
init(matches[4]) :=  FALSE;
init(matches[5]) :=  FALSE;
init(matches[6]) :=  FALSE;
init(matches[7]) :=  FALSE;
next(matches[0]) := case
move = 0 : matches[0 + direction];
move = 0 - direction : matches[0 + direction];
move = 0 - direction*2 : TRUE;
move = 0 - direction*3 : TRUE;
TRUE : matches[0];
esac;

next(matches[1]) := case
move = 1 : matches[1 + direction];
move = 1 - direction : matches[1 + direction];
move = 1 - direction*2 : TRUE;
move = 1 - direction*3 : TRUE;
TRUE : matches[1];
esac;

next(matches[2]) := case
move = 2 : matches[2 + direction];
move = 2 - direction : matches[2 + direction];
move = 2 - direction*2 : TRUE;
move = 2 - direction*3 : TRUE;
TRUE : matches[2];
esac;

next(matches[3]) := case
move = 3 : matches[3 + direction];
move = 3 - direction : matches[3 + direction];
move = 3 - direction*2 : TRUE;
move = 3 - direction*3 : TRUE;
TRUE : matches[3];
esac;

next(matches[4]) := case
move = 4 : matches[4 + direction];
move = 4 - direction : matches[4 + direction];
move = 4 - direction*2 : TRUE;
move = 4 - direction*3 : TRUE;
TRUE : matches[4];
esac;

next(matches[5]) := case
move = 5 : matches[5 + direction];
move = 5 - direction : matches[5 + direction];
move = 5 - direction*2 : TRUE;
move = 5 - direction*3 : TRUE;
TRUE : matches[5];
esac;

next(matches[6]) := case
move = 6 : matches[6 + direction];
move = 6 - direction : matches[6 + direction];
move = 6 - direction*2 : TRUE;
move = 6 - direction*3 : TRUE;
TRUE : matches[6];
esac;

next(matches[7]) := case
move = 7 : matches[7 + direction];
move = 7 - direction : matches[7 + direction];
move = 7 - direction*2 : TRUE;
move = 7 - direction*3 : TRUE;
TRUE : matches[7];
esac;

LTLSPEC G !(goal);
